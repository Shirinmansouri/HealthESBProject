// <auto-generated />
using System;
using HealthESB.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HealthESB.API.Migrations
{
    [DbContext(typeof(HealthESBDbContext))]
    [Migration("20210330222311_b")]
    partial class b
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HealthESB.Domain.Entities.Claims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ActionTitleEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ActionTitleFr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ControlleEnTitile")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ControlleFaTitile")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ControllerEntityID")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<string>("ControllerName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Claims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActionName = "Create",
                            ActionTitleEn = "Create",
                            ActionTitleFr = "ایجاد",
                            ControlleEnTitile = "PrescriptionBarcode",
                            ControlleFaTitile = "اقلام نسخه",
                            ControllerEntityID = 2,
                            ControllerName = "PrescriptionBarcode"
                        },
                        new
                        {
                            Id = 2,
                            ActionName = "ReActiveUid",
                            ActionTitleEn = "ReActiveUid",
                            ActionTitleFr = "فعال سازی مجدد",
                            ControlleEnTitile = "PrescriptionBarcode",
                            ControlleFaTitile = "اقلام نسخه",
                            ControllerEntityID = 2,
                            ControllerName = "PrescriptionBarcode"
                        },
                        new
                        {
                            Id = 3,
                            ActionName = "confirm",
                            ActionTitleEn = "confirm",
                            ActionTitleFr = "تایید نهایی اقلام",
                            ControlleEnTitile = "PrescriptionBarcode",
                            ControlleFaTitile = "اقلام نسخه",
                            ControllerEntityID = 2,
                            ControllerName = "PrescriptionBarcode"
                        },
                        new
                        {
                            Id = 4,
                            ActionName = "Create",
                            ActionTitleEn = "Create",
                            ActionTitleFr = "ایجاد نسخه",
                            ControlleEnTitile = "Prescription",
                            ControlleFaTitile = "نسخه",
                            ControllerEntityID = 1,
                            ControllerName = "Prescription"
                        },
                        new
                        {
                            Id = 5,
                            ActionName = "ReActiveByPrescriptionId",
                            ActionTitleEn = "ReActiveByPrescriptionId",
                            ActionTitleFr = "فعال سازی گروهی با شماره نسخه",
                            ControlleEnTitile = "PrescriptionBarcode",
                            ControlleFaTitile = "اقلام نسخه",
                            ControllerEntityID = 2,
                            ControllerName = "PrescriptionBarcode"
                        },
                        new
                        {
                            Id = 6,
                            ActionName = "GetPrescriptionActivity",
                            ActionTitleEn = "GetPrescriptionActivity",
                            ActionTitleFr = "تاریخچه ی درخواست های ارسالی",
                            ControlleEnTitile = "PrescriptionBarcodeDetailes",
                            ControlleFaTitile = "جزئیات اقلام نسخه",
                            ControllerEntityID = 3,
                            ControllerName = "PrescriptionBarcodeDetailes"
                        },
                        new
                        {
                            Id = 7,
                            ActionName = "GetPrescriptionBarcodeForActivation",
                            ActionTitleEn = "GetPrescriptionBarcodeForActivation",
                            ActionTitleFr = "جزئیات اقلام های نسخه های ارسالی",
                            ControlleEnTitile = "PrescriptionBarcodeDetailes",
                            ControlleFaTitile = "جزئیات اقلام نسخه",
                            ControllerEntityID = 3,
                            ControllerName = "PrescriptionBarcodeDetailes"
                        },
                        new
                        {
                            Id = 8,
                            ActionName = "CreateUser",
                            ActionTitleEn = "CreateUser",
                            ActionTitleFr = "ایجاد کاربر",
                            ControlleEnTitile = "AuthManagement",
                            ControlleFaTitile = "مدیریت کاربران",
                            ControllerEntityID = 4,
                            ControllerName = "AuthManagement"
                        },
                        new
                        {
                            Id = 9,
                            ActionName = "UpdateUser",
                            ActionTitleEn = "UpdateUser",
                            ActionTitleFr = "به روززسانی کاربر",
                            ControlleEnTitile = "AuthManagement",
                            ControlleFaTitile = "مدیریت کاربران",
                            ControllerEntityID = 4,
                            ControllerName = "AuthManagement"
                        },
                        new
                        {
                            Id = 10,
                            ActionName = "CreateRoles",
                            ActionTitleEn = "CreateRoles",
                            ActionTitleFr = "ایجاد نقش",
                            ControlleEnTitile = "AuthManagement",
                            ControlleFaTitile = "مدیریت کاربران",
                            ControllerEntityID = 4,
                            ControllerName = "AuthManagement"
                        },
                        new
                        {
                            Id = 11,
                            ActionName = "UpdateRoles",
                            ActionTitleEn = "UpdateRoles",
                            ActionTitleFr = "به روزرسانی نقش",
                            ControlleEnTitile = "AuthManagement",
                            ControlleFaTitile = "مدیریت کاربران",
                            ControllerEntityID = 4,
                            ControllerName = "AuthManagement"
                        },
                        new
                        {
                            Id = 12,
                            ActionName = "GetRoles",
                            ActionTitleEn = "GetRoles",
                            ActionTitleFr = "لیست نقش ها",
                            ControlleEnTitile = "AuthManagement",
                            ControlleFaTitile = "مدیریت کاربران",
                            ControllerEntityID = 4,
                            ControllerName = "AuthManagement"
                        },
                        new
                        {
                            Id = 13,
                            ActionName = "getUserRolesByUserIdAsync",
                            ActionTitleEn = "getUserRolesByUserIdAsync",
                            ActionTitleFr = "دریافت نقش های کاربر",
                            ControlleEnTitile = "AuthManagement",
                            ControlleFaTitile = "مدیریت کاربران",
                            ControllerEntityID = 4,
                            ControllerName = "AuthManagement"
                        },
                        new
                        {
                            Id = 14,
                            ActionName = "getUsersAsync",
                            ActionTitleEn = "getUsersAsync",
                            ActionTitleFr = "لیست کاربران",
                            ControlleEnTitile = "AuthManagement",
                            ControlleFaTitile = "مدیریت کاربران",
                            ControllerEntityID = 4,
                            ControllerName = "AuthManagement"
                        },
                        new
                        {
                            Id = 15,
                            ActionName = "GetClaimList",
                            ActionTitleEn = "GetClaimList",
                            ActionTitleFr = "دریافت لیست دسترسی ها",
                            ControlleEnTitile = "AuthManagement",
                            ControlleFaTitile = "مدیریت کاربران",
                            ControllerEntityID = 4,
                            ControllerName = "AuthManagement"
                        },
                        new
                        {
                            Id = 16,
                            ActionName = "GetUserClaims",
                            ActionTitleEn = "GetUserClaims",
                            ActionTitleFr = "لیست دسترسی های کاربر",
                            ControlleEnTitile = "AuthManagement",
                            ControlleFaTitile = "مدیریت کاربران",
                            ControllerEntityID = 4,
                            ControllerName = "AuthManagement"
                        },
                        new
                        {
                            Id = 17,
                            ActionName = "AssignRoleToClaims",
                            ActionTitleEn = "AssignRoleToClaims",
                            ActionTitleFr = "اختصاص دسترسی به نقش",
                            ControlleEnTitile = "AuthManagement",
                            ControlleFaTitile = "مدیریت کاربران",
                            ControllerEntityID = 4,
                            ControllerName = "AuthManagement"
                        },
                        new
                        {
                            Id = 18,
                            ActionName = "RemoveClaimsFromRole",
                            ActionTitleEn = "RemoveClaimsFromRole",
                            ActionTitleFr = "حذف دسترسی از نقش",
                            ControlleEnTitile = "AuthManagement",
                            ControlleFaTitile = "مدیریت کاربران",
                            ControllerEntityID = 4,
                            ControllerName = "AuthManagement"
                        });
                });

            modelBuilder.Entity("HealthESB.Domain.Entities.Prescription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BasicInsurance")
                        .HasColumnType("int");

                    b.Property<int>("ComplementaryInsurance")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicalCouncilNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OutErrorCode")
                        .HasColumnType("int");

                    b.Property<string>("OutErrorMessage")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long?>("OutPrescriptionId")
                        .HasColumnType("bigint");

                    b.Property<string>("PatientGivenName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PatientNationalCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PatientSurname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PharmacyGln")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhysicianGivenName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhysicianSurName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Prescription");
                });

            modelBuilder.Entity("HealthESB.Domain.Entities.PrescriptionBarcode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BarcodeUid")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GenericCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OutErrorCode")
                        .HasColumnType("int");

                    b.Property<string>("OutErrorMessage")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PrescriptionBarcodeStatusId")
                        .HasColumnType("int");

                    b.Property<long>("PrescriptionId")
                        .HasColumnType("bigint");

                    b.Property<string>("ReCheckCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PrescriptionBarcodeStatusId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("PrescriptionBarcode");
                });

            modelBuilder.Entity("HealthESB.Domain.Entities.PrescriptionBarcodeDetailes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BarcodeUid")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BatchCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnglishName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Expiration")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("GenericCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Irc")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Manufacturing")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PersianName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PrescriptionBarcodeDetailesTypesId")
                        .HasColumnType("int");

                    b.Property<long>("PrescriptionBarcodeId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<string>("ProductType")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StatusMessage")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("TrackingCode")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("UnitConsumed")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PrescriptionBarcodeDetailesTypesId");

                    b.HasIndex("PrescriptionBarcodeId");

                    b.ToTable("PrescriptionBarcodeDetailes");
                });

            modelBuilder.Entity("HealthESB.Domain.Entities.PrescriptionBarcodeDetailesType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("PrescriptionBarcodeDetailesType");
                });

            modelBuilder.Entity("HealthESB.Domain.Entities.PrescriptionBarcodeStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("PrescriptionBarcodeStatus");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("HealthESB.Domain.Entities.PrescriptionBarcode", b =>
                {
                    b.HasOne("HealthESB.Domain.Entities.PrescriptionBarcodeStatus", "PrescriptionBarcodeStatus")
                        .WithMany()
                        .HasForeignKey("PrescriptionBarcodeStatusId");

                    b.HasOne("HealthESB.Domain.Entities.Prescription", "Prescription")
                        .WithMany()
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prescription");

                    b.Navigation("PrescriptionBarcodeStatus");
                });

            modelBuilder.Entity("HealthESB.Domain.Entities.PrescriptionBarcodeDetailes", b =>
                {
                    b.HasOne("HealthESB.Domain.Entities.PrescriptionBarcodeDetailesType", "PrescriptionBarcodeDetailesTypes")
                        .WithMany()
                        .HasForeignKey("PrescriptionBarcodeDetailesTypesId");

                    b.HasOne("HealthESB.Domain.Entities.PrescriptionBarcode", "PrescriptionBarcode")
                        .WithMany()
                        .HasForeignKey("PrescriptionBarcodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrescriptionBarcode");

                    b.Navigation("PrescriptionBarcodeDetailesTypes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
